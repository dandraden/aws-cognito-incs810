---
  AWSTemplateFormatVersion: 2010-09-09

  Description: VPC Infrastructure setup and deployment of Cloud9 IDE for Serverless Auth Workshop

  Parameters:
  
    EventEngine:
      Type: String
      Default: No
      AllowedValues: 
        - Yes
        - No
      Description: Are you at an AWS sponosored event where Event Engine is being used?

    ResourceName:
      Type: String
      Default: serverless-idm-wksp
      AllowedValues: 
        - serverless-idm-wksp
      Description: Prefix of Resources created for this workshop.

  Conditions:

    Cloud9EEOwnership: !Equals [ !Ref EventEngine, Yes ]

    Cloud9UserOwnership: !Equals [ !Ref EventEngine, No ]

  Resources:

    # Create the Cloud9 Instance in a specified Subnet
    Cloud9Instance:
      Condition: Cloud9UserOwnership
      Type: "AWS::Cloud9::EnvironmentEC2"
      Properties:
        Description: "Cloud9 IDE for the Serverless Authentication and Authorization Workshop"
        AutomaticStopTimeMinutes: 60
        InstanceType: t2.micro
        Name: !Join [ '-', [ !Ref ResourceName, 'ide'  ] ]
        SubnetId: !Ref PublicSubnet1
      DependsOn: GatewayToInternet
    
    # Create the Cloud9 Instance in a specified Subnet
    Cloud9InstanceEE:
      Condition: Cloud9EEOwnership
      Type: "AWS::Cloud9::EnvironmentEC2"
      Properties:
        Description: "Cloud9 IDE for the Serverless Authentication and Authorization Workshop"
        AutomaticStopTimeMinutes: 60
        InstanceType: t2.micro
        Name: !Join [ '-', [ !Ref ResourceName, 'ide'  ] ]
        SubnetId: !Ref PublicSubnet1
        OwnerArn: !Sub "arn:aws:sts::${AWS::AccountId}:assumed-role/TeamRole/MasterKey"
      DependsOn: GatewayToInternet

    # Create the VPC infrastructure
    Vpc:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 172.20.0.0/16
        EnableDnsHostnames: true
        Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref ResourceName, 'VPC'  ] ]

    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref Vpc
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: 172.20.1.0/24
        Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref ResourceName, 'PublicSubnet1'  ] ]  

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref ResourceName, 'InternetGateway'  ] ]  

    GatewayToInternet:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref Vpc
        InternetGatewayId: !Ref InternetGateway

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref Vpc
        Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref ResourceName, 'PublicRouteTable'  ] ]

    PublicRoute:
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
      Type: AWS::EC2::Route

    PubSubnet1RTAssoc:
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable
      Type: AWS::EC2::SubnetRouteTableAssociation
    
    # Create Pre Sign-Up Lambda Trigger Role
    LambdaPreSignUpRole: 
      Type: AWS::IAM::Role
      Properties: 
        RoleName: !Join [ '-', [ !Ref ResourceName, 'lambda', 'pre-sign-up'  ] ]
        AssumeRolePolicyDocument: 
          Version: 2012-10-17
          Statement: 
            - 
              Effect: Allow
              Principal: 
                Service: 
                  - lambda.amazonaws.com
              Action: 
                - sts:AssumeRole
        Path: /
        Policies: 
          - 
            PolicyName: PreSignUpPolicy
            PolicyDocument: 
              Version: 2012-10-17
              Statement: 
                - 
                  Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'
      
    # Create Pre Sign-Up Lambda Trigger
    LambdaPreSignUp: 
      Type: "AWS::Lambda::Function"
      Properties: 
        FunctionName: 
          Fn::Join:
          - '-'
          - [!Ref ResourceName, 'pre-sign-up']
        Handler: "index.lambda_handler"
        Environment:
          Variables:
            PREFIX: !Ref ResourceName
        Role: 
          Fn::GetAtt: 
            - "LambdaPreSignUpRole"
            - "Arn"
        Code: 
          ZipFile: |
            # PASTE CODE HERE
        Runtime: "python3.7"
        Timeout: "35"

    # Create Custom Message Lambda Trigger Role
    LambdaCustomMessageRole: 
      Type: AWS::IAM::Role
      Properties: 
        RoleName: !Join [ '-', [ !Ref ResourceName, 'lambda', 'custom-message'  ] ]
        AssumeRolePolicyDocument: 
          Version: 2012-10-17
          Statement: 
            - 
              Effect: Allow
              Principal: 
                Service: 
                  - lambda.amazonaws.com
              Action: 
                - sts:AssumeRole
        Path: /
        Policies: 
          - 
            PolicyName: CustomMessagePolicy
            PolicyDocument: 
              Version: 2012-10-17
              Statement: 
                - 
                  Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'
      
    # Create Custom Message Lambda Trigger
    LambdaCustomMessage: 
      Type: "AWS::Lambda::Function"
      Properties: 
        FunctionName: 
          Fn::Join:
          - '-'
          - [!Ref ResourceName, 'custom-message']
        Handler: "index.lambda_handler"
        Environment:
          Variables:
            PREFIX: !Ref ResourceName
        Role: 
          Fn::GetAtt: 
            - "LambdaCustomMessageRole"
            - "Arn"
        Code: 
          ZipFile: |
            # PASTE CODE HERE
        Runtime: "python3.7"
        Timeout: "35"

  Outputs:
    Cloud9IDE:
      Condition: Cloud9UserOwnership
      Value:
        !Join ["",["https://",!Ref "AWS::Region",".console.aws.amazon.com/cloud9/ide/",!Ref Cloud9Instance,"?region=",!Ref "AWS::Region"]]
    Cloud9IDEEE:
      Condition: Cloud9EEOwnership
      Value:
        !Join ["",["https://",!Ref "AWS::Region",".console.aws.amazon.com/cloud9/ide/",!Ref Cloud9InstanceEE,"?region=",!Ref "AWS::Region"]]

    Vpc:
      Description: Vpc for Cloud9 instance
      Value: !Ref Vpc
      Export:
        Name: !Join [ '-', [ !Ref ResourceName, 'VPC'  ] ]
    PublicSubnet1:
      Description: Public Subnet for Cloud9 Instance
      Value: !Ref PublicSubnet1
      Export:
        Name: !Join [ '-', [ !Ref ResourceName, 'PublicSubnet1'  ] ]
